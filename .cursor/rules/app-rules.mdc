
Use TypeScript with strict type checking for all files.
Create standalone Angular components by default, using the standalone: true property.
Use Angular signals for reactive state management when applicable.
Follow Angular naming conventions: suffix component files with .component.ts, .component.html, and .component.css.
Use PascalCase for component class names and kebab-case for component selectors (e.g., app-user-list).
Generate JSDoc comments for all public methods and properties in components.
Use Tailwind CSS utility classes in component templates; avoid inline styles unless explicitly required.
Ensure Tailwind classes respect Angular’s ViewEncapsulation (default: Emulated) to prevent style leaks.
Organize Tailwind classes by category (e.g., layout, spacing, typography) for readability, following the recommended order: https://tailwindcss.com/docs/optimizing-for-production#class-order.
When generating HTTP services, use Angular’s HttpClient with typed responses and error handling.
Example standalone Angular component with Tailwind CSS:

import { Component, signal } from '@angular/core';
import { CommonModule } from '@angular/common';
import { HttpClient } from '@angular/common/http';
import { catchError, throwError } from 'rxjs';

/** Displays a list of users with Tailwind styling */
@Component({
  selector: 'app-user-list',
  standalone: true,
  imports: [CommonModule],
  template: `
    <div class="container mx-auto p-4">
      <h1 class="text-2xl font-bold mb-4">User List</h1>
      <ul class="space-y-2">
        <li *ngFor="let user of users()" class="p-2 bg-gray-100 rounded hover:bg-gray-200">
          {{ user.name }}
        </li>
      </ul>
    </div>
  `,
  styles: []
})
export class UserListComponent {
  /** Signal to store user list */
  users = signal<{ name: string }[]>([]);

  constructor(private http: HttpClient) {
    this.fetchUsers();
  }

  /** Fetches users from the backend */
  fetchUsers() {
    this.http.get<{ name: string }[]>('/api/users')
      .pipe(
        catchError(error => {
          console.error('Error fetching users', error);
          return throwError(() => new Error('Failed to fetch users'));
        })
      )
      .subscribe(users => this.users.set(users));
  }
}
Example Tailwind configuration in tailwind.config.js:
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: ['./src/**/*.{html,ts}'],
  theme: {
    extend: {
      colors: {
        primary: '#1D4ED8',
      },
    },
  },
  plugins: [],
};

When generating templates, use Tailwind classes for layout, spacing, and typography (e.g., flex, mx-auto, text-2xl).
Avoid duplicating Tailwind classes; use @apply in .component.css files only for reusable styles, e.g.:
.btn {
  @apply px-4 py-2 bg-primary text-white rounded hover:bg-blue-700;
}

When generating services, use Angular’s dependency injection and RxJS for HTTP requests.
Always reference this file (angular-tailwind.rules) when generating or editing code.

# Архитектура проекта

Используй Feature-based архитектуру с элементами Domain-Driven Design (DDD):
- Каждый бизнес-модуль (feature/domain) размещай в отдельной папке внутри src/app/features.
- Внутри feature-домена храни компоненты, сервисы, сторы, утилиты, типы, роуты, относящиеся только к этому домену.
- Общие компоненты, утилиты, пайпы и директивы размещай в src/app/shared.
- Инфраструктурные сервисы, guards, interceptors — в src/app/core.
- Используй standalone-компоненты и Angular signals для управления состоянием.
- Соблюдай строгие границы между доменами, не смешивай бизнес-логику разных областей.
- Все новые фичи и изменения реализуй в рамках соответствующего feature/domain.

Это правило обязательно для всех новых изменений и генерации кода.



When generating services, use Angular’s dependency injection and RxJS for HTTP requests.
Always reference this file (angular-tailwind.rules) when generating or editing code.

# Бизнес-модель и структура сайта

Цель сайта:
Продажа услуг по прохождению независимой оценки квалификации (НОК) для строительной сферы и сферы пожарной безопасности.

Основные разделы сайта:
- Главная страница — краткое описание компании, преимуществ, CTA, основные услуги, отзывы, контакты.
- Контакты — адреса, телефоны, карта, форма обратной связи.
- Услуги
  - Общая страница услуг — список всех услуг с кратким описанием и ссылками на детальные страницы.
  - Детальные страницы услуг:
    - Прохождение НОК в строительстве
    - Прохождение НОК по проектированию
    - Прохождение НОК по изысканиям
    - Прохождение НОК для специалистов по промышленной безопасности
    - (добавлять новые услуги по мере необходимости)
- Блог — актуальные новости, статьи, аналитика по рынку НОК, кейсы, советы.
- Информационный раздел о НОК
  - Общая информация о независимой оценке квалификации
  - Часто задаваемые вопросы (FAQ)
  - Центр оценки квалификации (описание, контакты, лицензии)
  - Страница о квалификациях (описание, требования, примеры)
  - Подразделы для расширения: нормативные документы, полезные ссылки, инструкции для соискателей и работодателей

Дополнительные требования:
- Возможность масштабирования (добавление новых услуг, разделов, страниц).
- SEO-оптимизация (мета-теги, структурированные данные, ЧПУ-адреса).
- Адаптивность (Tailwind CSS).
- Возможность SSR (Angular Universal).
- Возможность интеграции с CRM/почтой для заявок.
- Возможность публикации и редактирования статей (блог).
- Возможность добавления отзывов, кейсов, сертификатов.

Рекомендуемая структура features/domains:
- main — главная страница
- contacts — контакты
- services — общий раздел услуг
- service-detail — детальные страницы услуг (каждая услуга — отдельный компонент/feature)
- blog — блог, статьи, новости
- info — информационный раздел о НОК
- faq — часто задаваемые вопросы
- center — центр оценки квалификации
- qualifications — квалификации и требования
- shared — общие компоненты (header, footer, кнопки, формы)
- core — инфраструктурные сервисы, guards, interceptors

Этот блок обязателен для ориентира при проектировании, генерации и развитии приложения.

