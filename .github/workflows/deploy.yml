name: Deploy to VPS

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
    types: [ closed ]

env:
  NODE_VERSION: '20'
  DOCKER_IMAGE_NAME: nokexpert-fe

permissions:
  contents: read
  packages: write

jobs:
  # Тестирование и сборка
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    # - name: Run linting
    #   run: npm run lint
      
    - name: Run tests
      run: npm run test:ci
      
    - name: Build for production
      run: npm run build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/
        retention-days: 1

  # Сборка Docker образа
  build-docker:
    needs: build-and-test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/aleksandrpv/${{ env.DOCKER_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Деплой на VPS
  deploy:
    needs: [build-and-test, build-docker]
    runs-on: ubuntu-latest
    permissions:
      contents: read
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup SSH key
      run: |
        mkdir -p ~/.ssh
        
        # Восстанавливаем полный формат SSH ключа
        cat > ~/.ssh/id_rsa << 'EOF'
        -----BEGIN OPENSSH PRIVATE KEY-----
        ${{ secrets.VPS_SSH_KEY }}
        -----END OPENSSH PRIVATE KEY-----
        EOF
        
        chmod 600 ~/.ssh/id_rsa
        chmod 700 ~/.ssh
        
        # Отладочная информация
        echo "=== SSH Key Debug ==="
        echo "Key file size: $(wc -c < ~/.ssh/id_rsa)"
        echo "Key file lines: $(wc -l < ~/.ssh/id_rsa)"
        echo "First line: $(head -n1 ~/.ssh/id_rsa)"
        echo "Last line: $(tail -n1 ~/.ssh/id_rsa)"
        
        # Проверяем ключ
        if ssh-keygen -y -f ~/.ssh/id_rsa > ~/.ssh/id_rsa.pub; then
          echo "✅ SSH key validation successful"
          echo "Public key: $(cat ~/.ssh/id_rsa.pub)"
        else
          echo "❌ SSH key validation failed"
          echo "Key content:"
          cat ~/.ssh/id_rsa
          exit 1
        fi
        
        # Добавляем хост
        ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts
        
    - name: Deploy to VPS
      run: |
        ssh -o ConnectTimeout=30 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i ~/.ssh/id_rsa deploy@${{ secrets.VPS_HOST }} << 'EOF'
          # Подготовка среды
          echo "=== 🚀 Начинаем деплой ==="
          
          # Создаем рабочую директорию если не существует
          sudo mkdir -p /opt/nokexpert-fe
          sudo chown deploy:deploy /opt/nokexpert-fe
          cd /opt/nokexpert-fe
          
          # Инициализируем git репозиторий если нужно
          if [ ! -d ".git" ]; then
            echo "Инициализируем git репозиторий..."
            git init
            git remote add origin https://github.com/AleksandrPV/nokexpert-fe.git
          fi
          
          # Получаем последний код
          echo "Обновляем код..."
          git fetch origin main
          git reset --hard origin/main
          
          # Проверяем Docker
          echo "Проверяем Docker..."
          if ! groups | grep -q docker; then
            echo "Добавляем пользователя deploy в группу docker..."
            sudo usermod -aG docker deploy
            echo "Перезапускаем сессию для применения прав..."
            exec sudo -u deploy bash << 'DOCKER_EOF'
          fi
          
          # Останавливаем текущие контейнеры
          echo "Останавливаем контейнеры..."
          docker-compose down || true
          
          # Логинимся в GitHub Container Registry
          echo "Логинимся в GitHub Registry..."
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # Получаем новый образ
          echo "Скачиваем новый образ..."
          docker pull ghcr.io/aleksandrpv/nokexpert-fe:latest
          
          # Запускаем новый контейнер
          echo "Запускаем контейнеры..."
          docker-compose up -d
          
          # Очищаем старые образы
          echo "Очищаем старые образы..."
          docker image prune -f
          
          # Проверяем статус
          echo "Проверяем статус..."
          sleep 15
          docker ps
          
          echo "✅ Деплой завершен успешно!"
        EOF

  # Уведомления
  notify:
    needs: [deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify deployment status
      if: needs.deploy.result == 'success'
      run: |
        echo "✅ Деплой прошёл успешно!"
        echo "🌐 Сайт доступен по адресу: https://nokexpert.ru"
        
    - name: Notify deployment failure
      if: needs.deploy.result == 'failure'
      run: |
        echo "❌ Деплой завершился с ошибкой!"
        echo "🔍 Проверьте логи и конфигурацию сервера" 