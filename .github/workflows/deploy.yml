name: Deploy to VPS

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
    types: [ closed ]

env:
  NODE_VERSION: '20'
  DOCKER_IMAGE_NAME: nokexpert-fe

permissions:
  contents: read
  packages: write

jobs:
  # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Å–±–æ—Ä–∫–∞
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    # - name: Run linting
    #   run: npm run lint
      
    - name: Run tests
      run: npm run test:ci
      
    - name: Build for production
      run: npm run build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/
        retention-days: 1

  # –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞
  build-docker:
    needs: build-and-test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/aleksandrpv/${{ env.DOCKER_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Verify pushed image
      run: |
        echo "‚úÖ Docker –æ–±—Ä–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –∑–∞–≥—Ä—É–∂–µ–Ω!"
        echo "üì¶ –¢—ç–≥–∏: ${{ steps.meta.outputs.tags }}"
        echo "üîó –û–±—Ä–∞–∑ –¥–æ—Å—Ç—É–ø–µ–Ω: ghcr.io/aleksandrpv/nokexpert-fe:latest"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–±—Ä–∞–∑ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–µ–Ω
        echo "–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –æ–±—Ä–∞–∑–∞..."
        docker pull ghcr.io/aleksandrpv/nokexpert-fe:latest
        echo "‚úÖ –û–±—Ä–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω!"

  # –î–µ–ø–ª–æ–π –Ω–∞ VPS
  deploy:
    needs: [build-and-test, build-docker]
    runs-on: ubuntu-latest
    permissions:
      contents: read
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup SSH key
      run: |
        mkdir -p ~/.ssh
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç SSH –∫–ª—é—á–∞
        cat > ~/.ssh/id_rsa << 'EOF'
        -----BEGIN OPENSSH PRIVATE KEY-----
        ${{ secrets.VPS_SSH_KEY }}
        -----END OPENSSH PRIVATE KEY-----
        EOF
        
        chmod 600 ~/.ssh/id_rsa
        chmod 700 ~/.ssh
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        echo "=== SSH Key Debug ==="
        echo "Key file size: $(wc -c < ~/.ssh/id_rsa)"
        echo "Key file lines: $(wc -l < ~/.ssh/id_rsa)"
        echo "First line: $(head -n1 ~/.ssh/id_rsa)"
        echo "Last line: $(tail -n1 ~/.ssh/id_rsa)"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á
        if ssh-keygen -y -f ~/.ssh/id_rsa > ~/.ssh/id_rsa.pub; then
          echo "‚úÖ SSH key validation successful"
          echo "Public key: $(cat ~/.ssh/id_rsa.pub)"
        else
          echo "‚ùå SSH key validation failed"
          echo "Key content:"
          cat ~/.ssh/id_rsa
          exit 1
        fi
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ö–æ—Å—Ç
        ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts
        
    - name: Deploy to VPS
      run: |
        ssh -o ConnectTimeout=30 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i ~/.ssh/id_rsa deploy@${{ secrets.VPS_HOST }} << 'EOF'
          echo "=== üöÄ –ù–∞—á–∏–Ω–∞–µ–º –¥–µ–ø–ª–æ–π ==="
          
          # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–æ–º–∞—à–Ω—é—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
          cd ~
          
          # –°–æ–∑–¥–∞–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
          mkdir -p ~/nokexpert-fe
          cd ~/nokexpert-fe
          
          # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
          echo "–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã..."
          docker stop nokexpert-fe 2>/dev/null || true
          docker rm nokexpert-fe 2>/dev/null || true
          docker stop temp-nginx 2>/dev/null || true
          docker rm temp-nginx 2>/dev/null || true
          
          # –õ–æ–≥–∏–Ω–∏–º—Å—è –≤ GitHub Container Registry
          echo "–õ–æ–≥–∏–Ω–∏–º—Å—è –≤ GitHub Registry..."
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–∑
          echo "–°–∫–∞—á–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–∑..."
          docker pull ghcr.io/aleksandrpv/nokexpert-fe:latest
          
          # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–∞–ø—Ä—è–º—É—é
          echo "–ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä..."
          docker run -d --name nokexpert-fe --restart unless-stopped -p 80:80 -e NODE_ENV=production ghcr.io/aleksandrpv/nokexpert-fe:latest
          
          # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–∑—ã
          echo "–û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–∑—ã..."
          docker image prune -f
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
          echo "–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å..."
          sleep 10
          docker ps
          
          echo "‚úÖ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!"
        EOF

  # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  notify:
    needs: [deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify deployment status
      if: needs.deploy.result == 'success'
      run: |
        echo "‚úÖ –î–µ–ø–ª–æ–π –ø—Ä–æ—à—ë–ª —É—Å–ø–µ—à–Ω–æ!"
        echo "üåê –°–∞–π—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: https://nokexpert.ru"
        
    - name: Notify deployment failure
      if: needs.deploy.result == 'failure'
      run: |
        echo "‚ùå –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π!"
        echo "üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–µ—Ä–≤–µ—Ä–∞" 