#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞
 * –ó–∞–ø—É—Å–∫: node scripts/check-performance.js
 */

const fs = require('fs');
const path = require('path');

console.log('üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞ –ù–û–ö –≠–∫—Å–ø–µ—Ä—Ç\n');

// –ü—Ä–æ–≤–µ—Ä–∫–∏
const checks = [
  {
    name: 'Lazy Loading –º–∞—Ä—à—Ä—É—Ç–æ–≤',
    check: () => {
      const routesFile = path.join(__dirname, '../src/app/app.routes.ts');
      const content = fs.readFileSync(routesFile, 'utf-8');
      return content.includes('loadComponent:');
    }
  },
  {
    name: 'Service Worker',
    check: () => {
      const configFile = path.join(__dirname, '../src/app/app.config.ts');
      const content = fs.readFileSync(configFile, 'utf-8');
      return content.includes('provideServiceWorker');
    }
  },
  {
    name: 'Inline Critical CSS',
    check: () => {
      const angularJson = path.join(__dirname, '../angular.json');
      const content = fs.readFileSync(angularJson, 'utf-8');
      return content.includes('"inlineCritical": true');
    }
  },
  {
    name: '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è Zone.js',
    check: () => {
      const configFile = path.join(__dirname, '../src/app/app.config.ts');
      const content = fs.readFileSync(configFile, 'utf-8');
      return content.includes('runCoalescing: true');
    }
  },
  {
    name: 'Preload —à—Ä–∏—Ñ—Ç–æ–≤',
    check: () => {
      const indexFile = path.join(__dirname, '../src/index.html');
      const content = fs.readFileSync(indexFile, 'utf-8');
      return content.includes('rel="preload"') && content.includes('fonts.googleapis.com');
    }
  },
  {
    name: '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π',
    check: () => {
      const imgComponent = path.join(__dirname, '../src/app/shared/components/optimized-image/optimized-image.component.ts');
      const content = fs.readFileSync(imgComponent, 'utf-8');
      return content.includes('decoding="async"') && content.includes('priority ? \'high\' : null');
    }
  }
];

// –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–æ–∫
let passed = 0;
let total = checks.length;

checks.forEach(({ name, check }) => {
  try {
    const result = check();
    const status = result ? '‚úÖ' : '‚ùå';
    console.log(`${status} ${name}`);
    if (result) passed++;
  } catch (error) {
    console.log(`‚ùå ${name} - –û—à–∏–±–∫–∞: ${error.message}`);
  }
});

console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${passed}/${total} –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ`);

if (passed === total) {
  console.log('üéâ –û—Ç–ª–∏—á–Ω–æ! –í—Å–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–Ω–µ–¥—Ä–µ–Ω—ã!');
} else {
  console.log('‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –µ—â–µ –Ω–µ –≤–Ω–µ–¥—Ä–µ–Ω—ã');
}

// –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
console.log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:');
console.log('1. –†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ Core Web Vitals –≤ Google PageSpeed Insights');
console.log('2. –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ —Ä–∞–∑–º–µ—Ä –±–∞–Ω–¥–ª–∞ –∫–æ–º–∞–Ω–¥–æ–π: npm run build:analyze');
console.log('3. –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é WebP —Ñ–æ—Ä–º–∞—Ç–∞');
console.log('4. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ CDN –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤');
console.log('5. –î–æ–±–∞–≤—å—Ç–µ preload –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π');
