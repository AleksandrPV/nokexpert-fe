#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 * –ó–∞–ø—É—Å–∫: node scripts/test-structured-data.js
 */

const fs = require('fs');
const path = require('path');

console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (Schema.org)\n');

// –ü—Ä–æ–≤–µ—Ä–∫–∏ structured data
const checks = [
  {
    name: 'FAQ Structured Data',
    check: () => {
      const faqPage = path.join(__dirname, '../src/app/features/faq/components/faq-page.component.ts');
      const content = fs.readFileSync(faqPage, 'utf-8');
      return content.includes('addCompleteFaqStructuredData');
    }
  },
  {
    name: 'Services Pricing Structured Data',
    check: () => {
      const servicesPage = path.join(__dirname, '../src/app/features/services/components/services-page.component.ts');
      const content = fs.readFileSync(servicesPage, 'utf-8');
      return content.includes('addServicesPricingStructuredData');
    }
  },
  {
    name: 'Service Availability Structured Data',
    check: () => {
      const contactsPage = path.join(__dirname, '../src/app/features/contacts/components/contacts-page.component.ts');
      const content = fs.readFileSync(contactsPage, 'utf-8');
      return content.includes('addServiceAvailabilityStructuredData');
    }
  },
  {
    name: 'Specific Service Structured Data',
    check: () => {
      const nokNostroyPage = path.join(__dirname, '../src/app/features/services/nok-nostroy/nok-nostroy-page.component.ts');
      const content = fs.readFileSync(nokNostroyPage, 'utf-8');
      return content.includes('addServicesPricingStructuredData');
    }
  },
  {
    name: 'SEO Service Methods',
    check: () => {
      const seoService = path.join(__dirname, '../src/app/shared/services/seo.service.ts');
      const content = fs.readFileSync(seoService, 'utf-8');
      return content.includes('addCompleteFaqStructuredData') &&
             content.includes('addServicesPricingStructuredData') &&
             content.includes('addServiceAvailabilityStructuredData');
    }
  },
  {
    name: 'Organization Data Structure',
    check: () => {
      const orgConfig = path.join(__dirname, '../src/environments/organization.config.ts');
      const content = fs.readFileSync(orgConfig, 'utf-8');
      return content.includes('offices:') && content.includes('workingHours:');
    }
  }
];

// –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–æ–∫
let passed = 0;
let total = checks.length;

checks.forEach(({ name, check }) => {
  try {
    const result = check();
    const status = result ? '‚úÖ' : '‚ùå';
    console.log(`${status} ${name}`);
    if (result) passed++;
  } catch (error) {
    console.log(`‚ùå ${name} - –û—à–∏–±–∫–∞: ${error.message}`);
  }
});

console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${passed}/${total} –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ`);

if (passed === total) {
  console.log('üéâ –û—Ç–ª–∏—á–Ω–æ! –í—Å–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–Ω–µ–¥—Ä–µ–Ω—ã!');
} else {
  console.log('‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ structured data –µ—â–µ –Ω–µ –≤–Ω–µ–¥—Ä–µ–Ω—ã');
}

// –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
console.log('\nüí° –ü—Ä–æ–≤–µ—Ä–∫–∞ structured data:');
console.log('1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Google Rich Results Test –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏');
console.log('2. Schema.org validator –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏');
console.log('3. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Ü–µ–Ω—ã –ø–∞—Ä—Å—è—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
console.log('4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É FAQ –≤ Google –ü–æ–∏—Å–∫–µ');

console.log('\nüîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:');
console.log('- Google Rich Results: https://search.google.com/test/rich-results');
console.log('- Schema.org Validator: https://validator.schema.org/');
console.log('- Google Merchant Center: https://merchants.google.com/');
