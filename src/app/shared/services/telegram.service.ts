import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable, throwError } from 'rxjs';
import { catchError } from 'rxjs/operators';
import { environment } from '../../../environments/environment';

export interface TelegramMessage {
  chat_id: string;
  text: string;
  parse_mode?: 'HTML' | 'Markdown';
}

export interface TelegramResponse {
  ok: boolean;
  result?: any;
  description?: string;
}

@Injectable({
  providedIn: 'root'
})
export class TelegramService {
  private readonly botToken = environment.telegram.botToken;
  private readonly chatId = environment.telegram.chatId;
  private readonly apiUrl = `https://api.telegram.org/bot${this.botToken}`;

  constructor(private http: HttpClient) {}

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
   */
  sendMessage(text: string): Observable<TelegramResponse> {
    const message: TelegramMessage = {
      chat_id: this.chatId,
      text: text,
      parse_mode: 'HTML'
    };

    return this.http.post<TelegramResponse>(`${this.apiUrl}/sendMessage`, message)
      .pipe(
        catchError(error => {
          console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error);
          return throwError(() => new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram'));
        })
      );
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
   */
  formatFeedbackMessage(formData: any): string {
    const subjectLabels: { [key: string]: string } = {
      'nok-nostroy': 'üèóÔ∏è –ù–û–ö –ù–û–°–¢–†–û–ô',
      'nok-nopriz': 'üìê –ù–û–ö –ù–û–ü–†–ò–ó',
      'nok-opb': 'üõ°Ô∏è –ù–û–ö –û–ü–ë',
      'consultation': 'üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è',
      'documents': 'üìÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤',
      'pricing': 'üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥',
      'other': '‚ùì –î—Ä—É–≥–æ–µ'
    };

    const subjectLabel = subjectLabels[formData.subject] || '‚ùì –ù–µ —É–∫–∞–∑–∞–Ω–æ';

    return `
<b>üìã –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞ –ù–û–ö –≠–∫—Å–ø–µ—Ä—Ç</b>

<b>üë§ –ò–º—è:</b> ${formData.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
<b>üìû –¢–µ–ª–µ—Ñ–æ–Ω:</b> ${formData.phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}
<b>üìß Email:</b> ${formData.email || '–ù–µ —É–∫–∞–∑–∞–Ω'}
<b>üéØ –¢–µ–º–∞:</b> ${subjectLabel}

<b>üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ:</b>
${formData.message || '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}

<b>üïê –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏:</b> ${new Date().toLocaleString('ru-RU')}
<b>üåê –ò—Å—Ç–æ—á–Ω–∏–∫:</b> –°–∞–π—Ç nok-expert.ru
    `.trim();
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Telegram
   */
  isConfigured(): boolean {
    return this.botToken !== 'YOUR_BOT_TOKEN_HERE' && this.chatId !== 'YOUR_CHAT_ID_HERE';
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
   */
  getBotInfo(): Observable<any> {
    return this.http.get(`${this.apiUrl}/getMe`);
  }
}
