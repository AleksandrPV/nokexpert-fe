import { Injectable, PLATFORM_ID, Inject } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';

@Injectable({
  providedIn: 'root'
})
export class HeadingsService {
  private isBrowser: boolean;

  constructor(@Inject(PLATFORM_ID) private platformId: Object) {
    this.isBrowser = isPlatformBrowser(this.platformId);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ H1-H6 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
   */
  validateHeadings(): { valid: boolean; issues: string[]; suggestions: string[] } {
    if (!this.isBrowser) {
      return { valid: true, issues: [], suggestions: [] };
    }

    const issues: string[] = [];
    const suggestions: string[] = [];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ H1
    const h1Elements = document.querySelectorAll('h1');
    if (h1Elements.length === 0) {
      issues.push('–ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ H1');
      suggestions.push('–î–æ–±–∞–≤—å—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ H1 —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏');
    } else if (h1Elements.length > 1) {
      issues.push(`–ù–∞–π–¥–µ–Ω–æ ${h1Elements.length} –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ H1 (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 1)`);
      suggestions.push('–û—Å—Ç–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ H1');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–µ—Ä–∞—Ä—Ö–∏—é –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    const headings = document.querySelectorAll('h1, h2, h3, h4, h5, h6');
    let previousLevel = 0;

    headings.forEach((heading, index) => {
      const currentLevel = parseInt(heading.tagName.charAt(1));

      if (index === 0 && currentLevel !== 1) {
        issues.push('–ü–µ—Ä–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å H1');
        suggestions.push('–ù–∞—á–Ω–∏—Ç–µ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞ H1');
      }

      if (currentLevel - previousLevel > 1) {
        issues.push(`–ü—Ä–æ–ø—É—â–µ–Ω —É—Ä–æ–≤–µ–Ω—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø–µ—Ä–µ–¥ ${heading.tagName} (—Å–∫–∞—á–æ–∫ —Å H${previousLevel} –Ω–∞ H${currentLevel})`);
        suggestions.push(`–î–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ H${previousLevel + 1} –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å`);
      }

      previousLevel = currentLevel;
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    headings.forEach((heading, index) => {
      const text = heading.textContent?.trim() || '';
      if (text.length < 10) {
        issues.push(`–ó–∞–≥–æ–ª–æ–≤–æ–∫ ${heading.tagName} —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π: "${text}"`);
        suggestions.push('–†–∞—Å—à–∏—Ä—å—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫, –¥–æ–±–∞–≤–∏–≤ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞');
      } else if (text.length > 70) {
        issues.push(`–ó–∞–≥–æ–ª–æ–≤–æ–∫ ${heading.tagName} —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (${text.length} —Å–∏–º–≤–æ–ª–æ–≤)`);
        suggestions.push('–°–æ–∫—Ä–∞—Ç–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ 50-70 —Å–∏–º–≤–æ–ª–æ–≤');
      }
    });

    return {
      valid: issues.length === 0,
      issues,
      suggestions
    };
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
   */
  getHeadingsStructure(): Array<{ level: number; text: string; id?: string }> {
    if (!this.isBrowser) return [];

    const headings = document.querySelectorAll('h1, h2, h3, h4, h5, h6');
    return Array.from(headings).map(heading => ({
      level: parseInt(heading.tagName.charAt(1)),
      text: heading.textContent?.trim() || '',
      id: heading.id || undefined
    }));
  }

  /**
   * –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è SEO
   */
  optimizeHeadings(): void {
    if (!this.isBrowser) return;

    const headings = document.querySelectorAll('h1, h2, h3, h4, h5, h6');

    headings.forEach((heading, index) => {
      const text = heading.textContent?.trim() || '';

      // –î–æ–±–∞–≤–ª—è–µ–º ID –¥–ª—è —è–∫–æ—Ä–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
      if (!heading.id) {
        const slug = this.createSlug(text);
        heading.id = slug;
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –º–∏–∫—Ä–æ—Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è speakable
      if (index < 3) { // –ü–µ—Ä–≤—ã–µ 3 –∑–∞–≥–æ–ª–æ–≤–∫–∞
        heading.setAttribute('itemprop', 'headline');
      }
    });
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç slug –∏–∑ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è ID
   */
  private createSlug(text: string): string {
    return text
      .toLowerCase()
      .replace(/[^\w\s-]/g, '') // –£–¥–∞–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
      .replace(/\s+/g, '-') // –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –¥–µ—Ñ–∏—Å—ã
      .replace(/-+/g, '-') // –£–¥–∞–ª—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–µ—Ñ–∏—Å—ã
      .trim();
  }

  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç –æ–≥–ª–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
   */
  generateTableOfContents(containerSelector: string = '.toc-container'): void {
    if (!this.isBrowser) return;

    const headings = document.querySelectorAll('h2, h3, h4');
    if (headings.length < 3) return; // –ù–µ —Å–æ–∑–¥–∞–µ–º –æ–≥–ª–∞–≤–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –º–∞–ª–æ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤

    const tocItems = Array.from(headings).map((heading, index) => {
      const level = parseInt(heading.tagName.charAt(1));
      const text = heading.textContent?.trim() || '';
      const id = heading.id || this.createSlug(text);

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ID –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
      if (!heading.id) {
        heading.id = id;
      }

      return {
        level,
        text,
        id,
        index
      };
    });

    const tocHtml = this.generateTocHtml(tocItems);
    const container = document.querySelector(containerSelector);

    if (container) {
      container.innerHTML = tocHtml;

      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–æ–≤ –¥–ª—è –ø–ª–∞–≤–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
      const tocLinks = container.querySelectorAll('.toc-link');
      tocLinks.forEach(link => {
        link.addEventListener('click', (e) => {
          e.preventDefault();
          const targetId = link.getAttribute('href')?.substring(1);
          if (targetId) {
            const targetElement = document.getElementById(targetId);
            if (targetElement) {
              targetElement.scrollIntoView({ behavior: 'smooth' });
              // –û–±–Ω–æ–≤–ª—è–µ–º URL –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
              history.pushState(null, '', `#${targetId}`);
            }
          }
        });
      });
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HTML –¥–ª—è –æ–≥–ª–∞–≤–ª–µ–Ω–∏—è
   */
  private generateTocHtml(items: Array<{ level: number; text: string; id: string; index: number }>): string {
    let html = `
      <nav class="toc bg-white rounded-lg border border-gray-200 p-6 shadow-sm" aria-label="–û–≥–ª–∞–≤–ª–µ–Ω–∏–µ">
        <h3 class="toc-title text-lg font-semibold text-gray-900 mb-4 flex items-center gap-2">
          <span>üìã</span> –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏
        </h3>
        <ul class="toc-list space-y-2">
    `;

    items.forEach(item => {
      const indentClass = item.level === 3 ? 'ml-4' : '';
      html += `<li class="toc-item ${indentClass}">
        <a href="#${item.id}" class="toc-link text-gray-700 hover:text-blue-600 transition-colors duration-200 block py-1 px-2 rounded hover:bg-blue-50 text-sm leading-relaxed">${item.text}</a>
      </li>`;
    });

    html += `
        </ul>
      </nav>
    `;
    return html;
  }
}
