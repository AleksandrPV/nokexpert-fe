import { Injectable, signal } from '@angular/core';
import { 
  FeedbackFormData, 
  FeedbackSubject, 
  FeedbackSubjectOption, 
  PopupConfig,
  FeedbackSubmitResult 
} from '../models/feedback.interface';

@Injectable({
  providedIn: 'root'
})
export class FeedbackPopupService {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ popup
  private _config = signal<PopupConfig>({
    isVisible: false,
    title: '–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏',
    subtitle: '–ü–æ–ª—É—á–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ –ù–û–ö',
    closeOnBackdrop: true,
    closeOnEsc: true
  });

  // –ü—É–±–ª–∏—á–Ω—ã–π readonly –¥–æ—Å—Ç—É–ø –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  readonly config = this._config.asReadonly();

  // –û–ø—Ü–∏–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã –æ–±—Ä–∞—â–µ–Ω–∏—è
  readonly subjectOptions: FeedbackSubjectOption[] = [
    {
      value: FeedbackSubject.NOK_NOSTROY,
      label: '–ù–û–ö –ù–û–°–¢–†–û–ô',
      icon: 'üèóÔ∏è'
    },
    {
      value: FeedbackSubject.NOK_NOPRIZ,
      label: '–ù–û–ö –ù–û–ü–†–ò–ó',
      icon: 'üìê'
    },
    {
      value: FeedbackSubject.CONSULTATION,
      label: '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è',
      icon: 'üí¨'
    },
    {
      value: FeedbackSubject.DOCUMENTS,
      label: '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤',
      icon: 'üìÑ'
    },
    {
      value: FeedbackSubject.PRICING,
      label: '–°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥',
      icon: 'üí∞'
    },
    {
      value: FeedbackSubject.OTHER,
      label: '–î—Ä—É–≥–æ–µ',
      icon: '‚ùì'
    }
  ];

  /**
   * –û—Ç–∫—Ä—ã—Ç—å popup —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
   */
  open(customConfig?: Partial<PopupConfig>): void {
    this._config.update(current => ({
      ...current,
      isVisible: true,
      ...customConfig
    }));

    // –ë–ª–æ–∫–∏—Ä—É–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    document.body.style.overflow = 'hidden';

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ ESC
    if (this._config().closeOnEsc) {
      document.addEventListener('keydown', this.handleEscKey);
    }
  }

  /**
   * –ó–∞–∫—Ä—ã—Ç—å popup
   */
  close(): void {
    this._config.update(current => ({
      ...current,
      isVisible: false
    }));

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    document.body.style.overflow = '';

    // –£–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ESC
    document.removeEventListener('keydown', this.handleEscKey);
  }

  /**
   * –ë—ã—Å—Ç—Ä—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Ç–µ–º–æ–π
   */
  openForNokNostroy(): void {
    this.open({
      title: '–ù–û–ö –ù–û–°–¢–†–û–ô',
      subtitle: '–ü–æ–ª—É—á–∏—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ–π –æ—Ü–µ–Ω–∫–µ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤'
    });
  }

  openForNokNopriz(): void {
    this.open({
      title: '–ù–û–ö –ù–û–ü–†–ò–ó',
      subtitle: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤—â–∏–∫–æ–≤ –∏ –∏–∑—ã—Å–∫–∞—Ç–µ–ª–µ–π –∫ –ù–û–ö'
    });
  }

  openForConsultation(): void {
    this.open({
      title: '–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è',
      subtitle: '–£–∑–Ω–∞–π—Ç–µ –±–æ–ª—å—à–µ –æ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥–∞—Ö –∏ –ø–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏'
    });
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã
   */
  async submitFeedback(formData: FeedbackFormData): Promise<FeedbackSubmitResult> {
    try {
      // –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
      await this.delay(1500);

      // –í–∞–ª–∏–¥–∞—Ü–∏—è
      if (!formData.name.trim() || !formData.email.trim() || !formData.message.trim()) {
        throw new Error('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
      }

      if (!formData.privacy) {
        throw new Error('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
      }

      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã:', formData);

      return {
        success: true,
        message: '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.'
      };
    } catch (error) {
      return {
        success: false,
        message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ',
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      };
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∞–≤–∏—à–∏ ESC
   */
  private handleEscKey = (event: KeyboardEvent): void => {
    if (event.key === 'Escape') {
      this.close();
    }
  };

  /**
   * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –∑–∞–¥–µ—Ä–∂–∫–∏
   */
  private delay(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms));
  }
} 