import { Component, OnInit, inject, ViewChild, ElementRef } from '@angular/core';
import { NgFor, NgIf, NgClass, DatePipe } from '@angular/common';
import { Router, RouterModule, ActivatedRoute } from '@angular/router';
import { SeoService } from '../../../shared/services/seo.service';
import { FeedbackPopupService } from '../../../features/feedback-popup/services/feedback-popup.service';
import { MainLayoutComponent } from '../../../shared/components/main-layout/main-layout.component';
import { BreadcrumbsComponent, BreadcrumbItem } from '../../../shared/components/breadcrumbs/breadcrumbs.component';
import { OrganizationService } from '../../../shared/services/organization.service';
import { FaqService } from '../services/faq.service';
import { FaqQuestion, FaqCategory, FaqFilter } from '../models/faq.interface';
import { combineLatest, switchMap, debounceTime, distinctUntilChanged } from 'rxjs';

@Component({
  selector: 'app-faq-page',
  standalone: true,
  imports: [NgFor, NgIf, NgClass, DatePipe, RouterModule, BreadcrumbsComponent],
  templateUrl: './faq-page.component.html',
  styleUrls: ['./faq-page.component.scss']
})
export class FaqPageComponent implements OnInit {
  @ViewChild('searchResults', { static: false }) searchResults!: ElementRef;
  
  breadcrumbs: BreadcrumbItem[] = [
    { label: '–ì–ª–∞–≤–Ω–∞—è', icon: 'üè†', url: '/' },
    { label: 'FAQ', icon: '‚ùì', active: true }
  ];

  private seo: SeoService = inject(SeoService);
  private feedbackService: FeedbackPopupService = inject(FeedbackPopupService);
  private organizationService = inject(OrganizationService);
  private faqService = inject(FaqService);
  private route = inject(ActivatedRoute);
  private router = inject(Router);

  // –î–∞–Ω–Ω—ã–µ
  questions: FaqQuestion[] = [];
  categories: FaqCategory[] = [];
  categoryStats: Array<FaqCategory & { count: number }> = [];
  
  // –§–∏–ª—å—Ç—Ä—ã
  selectedCategory: string = '';
  searchQuery: string = '';
  showOnlyPopular: boolean = false;
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ
  openedIndex: number | null = null;
  isLoading: boolean = true;

  // –ì–µ—Ç—Ç–µ—Ä—ã –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
  get phoneDisplay(): string {
    return this.organizationService.getPhoneDisplay();
  }

  get phoneHref(): string {
    return this.organizationService.getPhoneHref();
  }

  get email(): string {
    return this.organizationService.getEmail();
  }

  ngOnInit(): void {
    this.setupSEO();
    this.loadData();
    this.setupQueryParams();
  }

  private setupSEO(): void {
    this.seo.setSeoData({
      title: 'FAQ –ø–æ –ù–û–ö ‚Äî –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ–π –æ—Ü–µ–Ω–∫–µ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏',
      description: '–ü–æ–ª–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ 80+ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –ù–û–ö: —Å—Ä–æ–∫–∏, —Å—Ç–æ–∏–º–æ—Å—Ç—å, –¥–æ–∫—É–º–µ–Ω—Ç—ã, –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞, –ù–û–°–¢–†–û–ô, –ù–û–ü–†–ò–ó, –ø–æ–∂–∞—Ä–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å. –≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.',
      keywords: '–ù–û–ö, FAQ, —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ–∑–∞–≤–∏—Å–∏–º–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏, –ù–û–°–¢–†–û–ô, –ù–û–ü–†–ò–ó, –ø–æ–∂–∞—Ä–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å, —ç–∫–∑–∞–º–µ–Ω, –¥–æ–∫—É–º–µ–Ω—Ç—ã, —Å—Ç–æ–∏–º–æ—Å—Ç—å, –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞',
      ogImage: '/assets/images/og-default.jpg',
      canonical: `${window.location.origin}/faq`
    });

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è FAQ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    this.seo.addFaqStructuredData([
      {
        question: '–ß—Ç–æ —Ç–∞–∫–æ–µ –ù–û–ö?',
        answer: '–ù–µ–∑–∞–≤–∏—Å–∏–º–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏ - —ç—Ç–æ –ø—Ä–æ—Ü–µ–¥—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è –ø–æ–ª–æ–∂–µ–Ω–∏—è–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞.'
      },
      {
        question: '–ö–æ–≥–¥–∞ —Å—Ç–∞–ª–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π –ù–û–ö –¥–ª—è —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π?',
        answer: '–° 1 —Å–µ–Ω—Ç—è–±—Ä—è 2022 –≥. –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–π –æ—Ç—Ä–∞—Å–ª–∏.'
      },
      {
        question: '–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –ù–û–ö –¥–ª—è —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π –≤ 2025 –≥–æ–¥—É?',
        answer: '–≠–∫–∑–∞–º–µ–Ω: 18000 —Ä—É–±–ª–µ–π, —Å 1 –º–∞—Ä—Ç–∞ 2025 –≥–æ–¥–∞ - 24000 —Ä—É–±–ª–µ–π.'
      }
    ]);

    // –î–æ–±–∞–≤–ª—è–µ–º breadcrumb —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    this.seo.addBreadcrumbsStructuredData([
      { name: '–ì–ª–∞–≤–Ω–∞—è', url: window.location.origin },
      { name: 'FAQ', url: `${window.location.origin}/faq` }
    ]);
  }

  private loadData(): void {
    combineLatest([
      this.faqService.getAllQuestions(),
      this.faqService.getAllCategories(),
      this.faqService.getCategoryStats()
    ]).subscribe(([questions, categories, stats]) => {
      this.questions = questions;
      this.categories = categories;
      this.categoryStats = stats;
      this.isLoading = false;
    });
  }

  private setupQueryParams(): void {
    this.route.queryParams.subscribe(params => {
      if (params['category']) {
        this.selectedCategory = params['category'];
      }
      if (params['search']) {
        this.searchQuery = params['search'];
      }
      if (params['popular']) {
        this.showOnlyPopular = params['popular'] === 'true';
      }
    });
  }

  toggle(index: number): void {
    this.openedIndex = this.openedIndex === index ? null : index;
  }

  onCategoryChange(categoryId: string): void {
    this.selectedCategory = this.selectedCategory === categoryId ? '' : categoryId;
    this.updateQueryParams();
    
    // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    setTimeout(() => {
      this.scrollToSearchResults();
    }, 100);
  }

  onSearchChange(query: string): void {
    this.searchQuery = query;
    this.updateQueryParams();
    
    // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ø–æ–∏—Å–∫–∞, –µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞–ø—Ä–æ—Å
    if (query.trim()) {
      setTimeout(() => {
        this.scrollToSearchResults();
      }, 100);
    }
  }

  private scrollToSearchResults(): void {
    if (this.searchResults) {
      const element = this.searchResults.nativeElement;
      const elementPosition = element.getBoundingClientRect().top;
      const offsetPosition = elementPosition + window.pageYOffset - 450; // –û—Ç—Å—Ç—É–ø 100px —Å–≤–µ—Ä—Ö—É
      
      window.scrollTo({
        top: offsetPosition,
        behavior: 'smooth'
      });
    }
  }

  onPopularToggle(): void {
    this.showOnlyPopular = !this.showOnlyPopular;
    this.updateQueryParams();
    
    // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
    setTimeout(() => {
      this.scrollToSearchResults();
    }, 100);
  }

  private updateQueryParams(): void {
    const params: any = {};
    
    if (this.selectedCategory) {
      params.category = this.selectedCategory;
    }
    if (this.searchQuery) {
      params.search = this.searchQuery;
    }
    if (this.showOnlyPopular) {
      params.popular = 'true';
    }

    this.router.navigate([], {
      relativeTo: this.route,
      queryParams: params,
      queryParamsHandling: 'merge'
    });
  }

  get filteredQuestions(): FaqQuestion[] {
    let filtered = this.questions;

    // –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if (this.selectedCategory) {
      filtered = filtered.filter(q => q.category === this.selectedCategory);
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
    if (this.showOnlyPopular) {
      filtered = filtered.filter(q => q.isPopular);
    }

    // –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É
    if (this.searchQuery) {
      const query = this.searchQuery.toLowerCase();
      filtered = filtered.filter(q => 
        q.question.toLowerCase().includes(query) ||
        q.shortAnswer.toLowerCase().includes(query) ||
        q.fullAnswer.toLowerCase().includes(query) ||
        q.tags.some(tag => tag.toLowerCase().includes(query))
      );
    }

    return filtered;
  }

  get selectedCategoryData(): FaqCategory | null {
    return this.categories.find(c => c.id === this.selectedCategory) || null;
  }

  openConsultationPopup(): void {
    this.feedbackService.openForConsultation();
  }

  clearFilters(): void {
    this.selectedCategory = '';
    this.searchQuery = '';
    this.showOnlyPopular = false;
    this.updateQueryParams();
    
    // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    setTimeout(() => {
      this.scrollToSearchResults();
    }, 100);
  }

  get hasActiveFilters(): boolean {
    return !!this.selectedCategory || !!this.searchQuery || this.showOnlyPopular;
  }

  getCategoryColor(categoryId: string): string {
    const category = this.categories.find(c => c.id === categoryId);
    return category?.color || 'bg-gray-100 text-gray-800';
  }

  getCategoryName(categoryId: string): string {
    const category = this.categories.find(c => c.id === categoryId);
    return category?.name || 'FAQ';
  }
} 