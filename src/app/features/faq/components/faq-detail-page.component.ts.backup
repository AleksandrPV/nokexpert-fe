import { Component, OnInit, inject, PLATFORM_ID } from '@angular/core';
import { NgFor, NgIf, NgClass, DatePipe, isPlatformBrowser } from '@angular/common';
import { ActivatedRoute, Router, RouterModule } from '@angular/router';
import { SeoService } from '../../../shared/services/seo.service';
import { FeedbackPopupService } from '../../../features/feedback-popup/services/feedback-popup.service';
import { MainLayoutComponent } from '../../../shared/components/main-layout/main-layout.component';
import { BreadcrumbsComponent, BreadcrumbItem } from '../../../shared/components/breadcrumbs/breadcrumbs.component';
import { OrganizationService } from '../../../shared/services/organization.service';
import { FaqService } from '../services/faq.service';
import { FaqQuestion, FaqCategory } from '../models/faq.interface';
import { switchMap, catchError, of } from 'rxjs';

@Component({
  selector: 'app-faq-detail-page',
  standalone: true,
  imports: [NgFor, NgIf, NgClass, DatePipe, RouterModule, BreadcrumbsComponent],
  template: `
    <div *ngIf="question; else loading">
      <app-breadcrumbs [breadcrumbs]="breadcrumbs"></app-breadcrumbs>

      <!-- Hero Section -->
      <section class="relative py-16 overflow-hidden">
        <div class="absolute inset-0 bg-gradient-to-br from-brand-sky/10 to-brand-coral/5"></div>
        <div class="container mx-auto px-6 relative z-10">
          <div class="max-w-4xl mx-auto">
            <!-- Category Badge -->
            <div class="inline-flex items-center gap-2 px-4 py-2 rounded-full mb-6"
                 [ngClass]="category?.color || 'bg-gray-100 text-gray-800'">
              <span class="text-sm font-medium">{{ category?.name || 'FAQ' }}</span>
            </div>

            <!-- Question -->
            <h1 class="text-4xl md:text-5xl font-bold text-brand-dark mb-6 leading-tight" data-speakable>
              {{ question.question }}
            </h1>

            <!-- Tags -->
            <div class="flex flex-wrap gap-2 mb-8">
              <span *ngFor="let tag of question.tags" 
                    class="px-3 py-1 bg-brand-coral/10 text-brand-coral rounded-full text-sm font-medium">
                #{{ tag }}
              </span>
            </div>
          </div>
        </div>
      </section>

      <!-- Answer Section -->
      <section class="mb-16">
        <div class="container mx-auto px-6">
          <div class="max-w-4xl mx-auto">
            <div class="bg-white rounded-2xl shadow-lg p-8 border border-gray-100">
              <div class="prose-enhanced max-w-none">
                <div class="faq-content text-xl text-brand-dark leading-relaxed mb-8" data-speakable [innerHTML]="question.fullAnswer">
                </div>

                <!-- Question Meta -->
                <div class="border-t border-gray-200 pt-6 mt-8">
                  <div class="flex flex-wrap items-center gap-6 text-sm text-gray-600">
                    <div class="flex items-center gap-2">
                      <span>üìÖ</span>
                      <span>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {{ question.updatedAt | date:'dd.MM.yyyy' }}</span>
                    </div>
                    <div class="flex items-center gap-2" *ngIf="question.isPopular">
                      <span>‚≠ê</span>
                      <span>–ü–æ–ø—É–ª—è—Ä–Ω—ã–π –≤–æ–ø—Ä–æ—Å</span>
                    </div>
                    <div class="flex items-center gap-2">
                      <span>üè∑Ô∏è</span>
                      <span>–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {{ category?.name }}</span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </section>

      <!-- Related Questions -->
      <section class="mb-16" *ngIf="relatedQuestions.length > 0">
        <div class="container mx-auto px-6">
          <div class="max-w-4xl mx-auto">
            <h2 class="text-3xl font-bold text-brand-dark mb-8 text-center">
              –ü–æ—Ö–æ–∂–∏–µ –≤–æ–ø—Ä–æ—Å—ã
            </h2>
            
            <div class="grid gap-6 md:grid-cols-2">
              <div *ngFor="let related of relatedQuestions" 
                   class="bg-white rounded-xl shadow-md p-6 border border-gray-100 hover:shadow-lg transition-shadow">
                <h3 class="text-lg font-semibold text-brand-dark mb-3 line-clamp-2">
                  {{ related.question }}
                </h3>
                <p class="text-gray-600 mb-4 line-clamp-3">
                  {{ related.shortAnswer }}
                </p>
                <a [routerLink]="['/faq', related.slug]" 
                   class="inline-flex items-center gap-2 text-brand-coral font-medium hover:underline">
                  –ß–∏—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç
                  <svg width="16" height="16" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
                    <path d="M9 18l6-6-6-6" stroke-linecap="round" stroke-linejoin="round"/>
                  </svg>
                </a>
              </div>
            </div>
          </div>
        </div>
      </section>

      <!-- CTA Section -->
      <section class="mb-16">
        <div class="container mx-auto px-6">
          <div class="max-w-4xl mx-auto text-center">
            <div class="bg-gradient-to-r from-brand-coral to-brand-navy rounded-2xl p-8 text-white">
              <h2 class="text-2xl font-bold mb-4">–ù–µ –Ω–∞—à–ª–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å?</h2>
              <p class="text-lg mb-6 opacity-90">
                –ó–∞–¥–∞–π—Ç–µ –µ–≥–æ –Ω–∞—à–∏–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º ‚Äî –º—ã –æ—Ç–≤–µ—Ç–∏–º –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤
              </p>
              <button (click)="openConsultationPopup()"
                      class="bg-white text-brand-coral px-8 py-3 rounded-full font-semibold text-lg shadow-lg hover:bg-gray-50 transition-colors">
                ‚úâÔ∏è –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å
              </button>
            </div>
          </div>
        </div>
      </section>

      <!-- Navigation -->
      <section class="mb-16">
        <div class="container mx-auto px-6">
          <div class="max-w-4xl mx-auto">
            <div class="flex flex-col sm:flex-row gap-4 justify-between">
              <a [routerLink]="['/faq']" 
                 class="inline-flex items-center gap-2 px-6 py-3 bg-gray-100 text-gray-700 rounded-full hover:bg-gray-200 transition-colors">
                <svg width="16" height="16" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
                  <path d="M15 18l-6-6 6-6" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
                –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã
              </a>
              
              <a [routerLink]="['/faq']" 
                 [queryParams]="{category: category?.id}"
                 class="inline-flex items-center gap-2 px-6 py-3 bg-brand-coral text-white rounded-full hover:bg-brand-coral/90 transition-colors">
                –ë–æ–ª—å—à–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —Ç–µ–º–µ
                <svg width="16" height="16" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
                  <path d="M9 18l6-6-6-6" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
              </a>
            </div>
          </div>
        </div>
      </section>
    </div>

    <ng-template #loading>
      <div class="container mx-auto px-6 py-16">
        <div class="max-w-4xl mx-auto text-center">
          <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-brand-coral mx-auto mb-4"></div>
          <p class="text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–∞...</p>
        </div>
      </div>
    </ng-template>
  `,
  styles: [`
    .line-clamp-2 {
      display: -webkit-box;
      -webkit-line-clamp: 2;
      -webkit-box-orient: vertical;
      overflow: hidden;
    }

    .line-clamp-3 {
      display: -webkit-box;
      -webkit-line-clamp: 3;
      -webkit-box-orient: vertical;
      overflow: hidden;
    }

    /* Enhanced prose styling for FAQ content */
    .prose-enhanced {
      color: #374151;
      line-height: 1.8;
      font-size: 1.125rem;
    }

    .faq-content {
      /* Base typography */
      font-size: 1.125rem;
      line-height: 1.8;
      color: #374151;

      /* Spacing between elements */
      * + * {
        margin-top: 1.5em;
      }

    .prose h2 {
      font-size: 2rem;
      font-weight: bold;
      color: #1f2937;
      margin: 2rem 0 1.5rem 0;
      line-height: 1.3;
    }

    .prose h3 {
      font-size: 1.5rem;
      font-weight: bold;
      color: #1f2937;
      margin: 1.5rem 0 1rem 0;
      line-height: 1.4;
    }

    .prose h4 {
      font-size: 1.25rem;
      font-weight: 600;
      color: #374151;
      margin: 1.25rem 0 0.75rem 0;
      line-height: 1.4;
    }

    .prose p {
      margin-bottom: 1rem;
      font-size: 1.125rem;
    }

    .prose p:last-child {
      margin-bottom: 0;
    }

    .prose strong {
      font-weight: 600;
      color: #1f2937;
    }

    .prose ul {
      margin: 1rem 0;
      padding-left: 1.5rem;
    }

    .prose li {
      margin-bottom: 0.5rem;
      font-size: 1.125rem;
    }

    .prose li:last-child {
      margin-bottom: 0;
    }

    /* Enhanced styling for FAQ content */
    .faq-content {
      /* Base typography */
      font-size: 1.125rem;
      line-height: 1.8;
      color: #374151;

      /* Spacing between elements */
      * + * {
        margin-top: 1.5em;
      }

      /* Headings */
      h2 {
        font-size: 1.875rem;
        font-weight: 700;
        color: #1f2937;
        margin: 2.5rem 0 1.5rem 0;
        line-height: 1.3;
        position: relative;

        &:before {
          content: '';
          position: absolute;
          left: 0;
          bottom: -0.5rem;
          width: 3rem;
          height: 3px;
          background: linear-gradient(to right, #ff7043, #e55a3a);
          border-radius: 2px;
        }
      }

      h3 {
        font-size: 1.375rem;
        font-weight: 600;
        color: #1f2937;
        margin: 2rem 0 1rem 0;
        line-height: 1.4;
        position: relative;

        &:before {
          content: 'üìã';
          margin-right: 0.5rem;
          font-size: 1rem;
        }
      }

      h4 {
        font-size: 1.125rem;
        font-weight: 600;
        color: #374151;
        margin: 1.5rem 0 0.75rem 0;
        line-height: 1.4;
        background: linear-gradient(135deg, #f3f4f6 0%, #e5e7eb 100%);
        padding: 0.75rem 1rem;
        border-radius: 8px;
        border-left: 4px solid #ff7043;
      }

      /* Paragraphs */
      p {
        margin-bottom: 1.25rem;
        text-align: justify;
        hyphens: auto;
        word-wrap: break-word;
      }

      p:last-child {
        margin-bottom: 0;
      }

      /* Strong text */
      strong {
        font-weight: 700;
        color: #1f2937;
        background: linear-gradient(135deg, #fef3c7 0%, #fde68a 100%);
        padding: 0.125rem 0.25rem;
        border-radius: 4px;
        border: 1px solid #f59e0b;
      }

      /* Lists */
      ul, ol {
        margin: 1.5rem 0;
        background: #f9fafb;
        padding: 1.5rem 2rem;
        border-radius: 8px;
        border: 1px solid #e5e7eb;
      }

      li {
        margin-bottom: 0.75rem;
        position: relative;
        padding-left: 0.5rem;
      }

      li:last-child {
        margin-bottom: 0;
      }

      ul li:before {
        content: '‚Ä¢';
        color: #ff7043;
        font-weight: bold;
        position: absolute;
        left: -1rem;
        top: 0;
      }

      ol {
        counter-reset: item;
      }

      ol li:before {
        content: counter(item) '.';
        counter-increment: item;
        color: #ff7043;
        font-weight: 600;
        position: absolute;
        left: -1.5rem;
        top: 0;
        width: 1rem;
        text-align: right;
      }

      /* Blockquotes */
      blockquote {
        border-left: 4px solid #ff7043;
        margin: 2rem 0;
        background: linear-gradient(135deg, #fef3c7 0%, #fde68a 50%, #fcd34d 100%);
        padding: 1.5rem 2rem;
        border-radius: 8px;
        font-style: italic;
        color: #92400e;
        position: relative;

        &:before {
          content: '"';
          font-size: 4rem;
          color: #ff7043;
          position: absolute;
          left: 0.5rem;
          top: -0.5rem;
          line-height: 1;
        }
      }

      /* Links */
      a {
        color: #ff7043;
        text-decoration: none;
        font-weight: 500;
        border-bottom: 1px solid transparent;
        transition: all 0.2s ease;

        &:hover {
          color: #e55a3a;
          border-bottom-color: #e55a3a;
        }
      }

      /* Code */
      code {
        background: #1f2937;
        color: #f9fafb;
        padding: 0.25rem 0.5rem;
        border-radius: 4px;
        font-family: 'Monaco', 'Consolas', monospace;
        font-size: 0.875em;
        border: 1px solid #374151;
      }

      /* Emphasis */
      em, i {
        font-style: italic;
        color: #6b7280;
        background: linear-gradient(135deg, #f3f4f6 0%, #e5e7eb 100%);
        padding: 0.125rem 0.25rem;
        border-radius: 4px;
      }

      /* Responsive design */
      @media (max-width: 768px) {
        h2 {
          font-size: 1.5rem;
        }

        h3 {
          font-size: 1.25rem;
        }

        h4 {
          font-size: 1rem;
        }

        ul, ol {
          padding: 1rem 1.5rem;
        }

        blockquote {
          padding: 1rem 1.5rem;
        }
      }
    }
  `]
})
export class FaqDetailPageComponent implements OnInit {
  private platformId = inject(PLATFORM_ID);
  private isBrowser = isPlatformBrowser(this.platformId);
  
  private route = inject(ActivatedRoute);
  private router = inject(Router);
  private seo = inject(SeoService);
  private feedbackService = inject(FeedbackPopupService);
  private organizationService = inject(OrganizationService);
  private faqService = inject(FaqService);

  question: FaqQuestion | null = null;
  category: FaqCategory | null = null;
  relatedQuestions: FaqQuestion[] = [];
  breadcrumbs: BreadcrumbItem[] = [];

  ngOnInit(): void {
    this.route.params.pipe(
      switchMap(params => {
        const slug = params['slug'];
        return this.faqService.getQuestionBySlug(slug);
      }),
      switchMap(question => {
        if (!question) {
          this.router.navigate(['/faq']);
          return of(null);
        }
        
        this.question = question;
        this.setupBreadcrumbs();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
        return this.faqService.getCategoryById(question.category).pipe(
          switchMap(category => {
            this.category = category;
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º SEO –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            this.setupSEO();
            return this.faqService.getRelatedQuestions(question.id);
          })
        );
      }),
      catchError(() => {
        this.router.navigate(['/faq']);
        return of(null);
      })
    ).subscribe(related => {
      if (related) {
        this.relatedQuestions = related;
      }
    });
  }

  private setupBreadcrumbs(): void {
    if (!this.question) return;

    this.breadcrumbs = [
      { label: '–ì–ª–∞–≤–Ω–∞—è', icon: 'üè†', url: '/' },
      { label: 'FAQ', icon: '‚ùì', url: '/faq' },
      { label: this.question.question, icon: 'üìù', active: true }
    ];
  }

  private setupSEO(): void {
    if (!this.question) return;

    // –§–æ—Ä–º–∏—Ä—É–µ–º SEO-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
    const seoTitle = `${this.question.question} ‚Äî FAQ –ø–æ –ù–û–ö | ${this.organizationService.getName()}`;
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º SEO-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
    const seoDescription = this.question.shortAnswer.length > 160 
      ? this.question.shortAnswer.substring(0, 157) + '...'
      : this.question.shortAnswer;
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    const categoryKeywords = this.category ? `${this.category.name}, ` : '';
    const tagKeywords = this.question.tags.join(', ');
    const seoKeywords = `–ù–û–ö, –Ω–µ–∑–∞–≤–∏—Å–∏–º–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏, FAQ, ${categoryKeywords}${tagKeywords}, ${this.question.question}`;

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º SEO-–º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    this.seo.setSeoData({
      title: seoTitle,
      description: seoDescription,
      keywords: seoKeywords,
      ogImage: '/assets/images/og-default.jpg',
      ogTitle: seoTitle,
      ogDescription: seoDescription,
      canonical: this.isBrowser ? `${window.location.origin}/faq/${this.question.slug}` : `/faq/${this.question.slug}`
    });

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–π FAQ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    this.seo.addFaqPageStructuredData({
      question: this.question.question,
      shortAnswer: this.question.shortAnswer,
      fullAnswer: this.question.fullAnswer,
      category: this.question.category,
      tags: this.question.tags,
      isPopular: this.question.isPopular
    }, `/faq/${this.question.slug}`);

    // –î–æ–±–∞–≤–ª—è–µ–º breadcrumb —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if (this.isBrowser) {
      this.seo.addBreadcrumbsStructuredData([
        { name: '–ì–ª–∞–≤–Ω–∞—è', url: window.location.origin },
        { name: 'FAQ', url: `${window.location.origin}/faq` },
        { name: this.question.question, url: `${window.location.origin}/faq/${this.question.slug}` }
      ]);
    }
  }

  openConsultationPopup(): void {
    this.feedbackService.openForConsultation();
  }

  // –ì–µ—Ç—Ç–µ—Ä—ã –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
  get phoneDisplay(): string {
    return this.organizationService.getPhoneDisplay();
  }

  get phoneHref(): string {
    return this.organizationService.getPhoneHref();
  }

  get email(): string {
    return this.organizationService.getEmail();
  }
} 